/* eslint-disable no-template-curly-in-string */

// Resources configuration resolved as .js variable with extra custom logic.
// BEWARE OF MODIFICATIONS, check 'serverless print', CloudFormation template generated by 'sls package' or generate a CloudFormation ChangeSet to verify modifications
// Modifying the stack definition that results on a unwanted deletion or replacement(deletion+creation) may lead to UNRECOVERABLE DATA LOSS
module.exports = async ({ options, resolveConfigurationProperty, resolveVariable }) => {
  const stage = await resolveVariable('self:provider.stage');
  const isProd = stage === 'prod'; // custom (js) condition to switch dev/prod configurations(CloudFormation doesn't accept its native conditions usage in some properties)

  return {
    // Cloudformation conditions to enable resources creation dynamically
    // https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html
    Conditions: {
      isNotLocal: { 'Fn::Not': [{ 'Fn::Equals': ['${self:provider.stage}', 'local'] }] }, // condition to prevent deployments with 'local' stage(resource is created only when provider.stage !== 'local')
    },

    //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //

    // Resources definitions
    // It could be also a good idea to create the infrastructure resources, like databases and storage, in a separate stack for more security
    // Use Policies/Backup from CloudFormation configurations to provide safety to resources data(e.g.: DeletionPolicy, UpdateReplacePolicy, PointInTimeRecoveryEnabled, etc..)
    Resources: {
      // DDB: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#aws-resource-dynamodb-table-syntax
      musicsDDBTable: {
        Condition: 'isNotLocal',
        DeletionPolicy: isProd ? 'Retain' : 'Delete', // save data on delete stack/resource(only production)
        UpdateReplacePolicy: isProd ? 'Retain' : 'Delete', // save data on update stack resource, in case of a replacement(only production)
        Type: 'AWS::DynamoDB::Table',
        Properties: {
          PointInTimeRecoverySpecification: {
            PointInTimeRecoveryEnabled: isProd, // enable table backup snapshots(only production)
          },
          ProvisionedThroughput: { ReadCapacityUnits: 1, WriteCapacityUnits: 1 },

          TableName: 'Musics-${self:provider.stage}',
          AttributeDefinitions: [
            { AttributeName: 'type_key', AttributeType: 'S' },
            { AttributeName: 'sk', AttributeType: 'S' },
          ],
          KeySchema: [
            { AttributeName: 'type_key', KeyType: 'HASH' },
            { AttributeName: 'sk', KeyType: 'RANGE' },
          ],
        },
      },
    },

    //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //

    // Stack outputs, which could be fetched from outside the stack and be used as useful references
    Outputs: {
      // DDB: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#aws-resource-dynamodb-table-return-values
      musicsDDBARN: {
        Condition: 'isNotLocal',
        Export: { Name: 'musicsDDBARN-${self:provider.stage}' },
        Value: { 'Fn::GetAtt': ['musicsDDBTable', 'Arn'] },
      },
    },
  };
};
